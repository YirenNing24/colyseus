{
  "version": 3,
  "sources": ["../src/BunWebSockets.ts"],
  "sourcesContent": ["// <reference types=\"bun-types\" />\n\n// \"bun-types\" is currently conflicting with \"ws\" types.\n// @ts-ignore\nimport { ServerWebSocket, WebSocketHandler } from \"bun\";\n\nimport type http from 'http';\nimport bunExpress from \"bun-serve-express\";\n\nimport { DummyServer, matchMaker, Transport, debugAndPrintError, spliceOne, ServerError, getBearerToken } from '@colyseus/core';\nimport { WebSocketClient, WebSocketWrapper } from './WebSocketClient';\nimport type { Application, Request, Response } from \"express\";\n\nexport type TransportOptions = Partial<Omit<WebSocketHandler, \"message\" | \"open\" | \"drain\" | \"close\" | \"ping\" | \"pong\">>;\n\ninterface WebSocketData {\n  url: URL;\n  // query: string,\n  // headers: { [key: string]: string },\n  // connection: { remoteAddress: string },\n}\n\nexport class BunWebSockets extends Transport {\n  public expressApp: Application;\n\n  protected clients: ServerWebSocket<WebSocketData>[] = [];\n  protected clientWrappers = new WeakMap<ServerWebSocket<WebSocketData>, WebSocketWrapper>();\n\n  private _listening: any;\n  private _originalRawSend: typeof WebSocketClient.prototype.raw | null = null;\n\n  constructor(private options: TransportOptions = {}) {\n    super();\n\n    const self = this;\n\n    this.expressApp = bunExpress({\n      websocket: {\n        ...this.options,\n\n        async open(ws) {\n          await self.onConnection(ws);\n        },\n\n        message(ws, message) {\n          // this.clientWrappers.get(ws)?.emit('message', Buffer.from(message.slice(0)));\n          self.clientWrappers.get(ws)?.emit('message', message);\n        },\n\n        close(ws, code, reason) {\n          // remove from client list\n          spliceOne(self.clients, self.clients.indexOf(ws));\n\n          const clientWrapper = self.clientWrappers.get(ws);\n          if (clientWrapper) {\n            self.clientWrappers.delete(ws);\n\n            // emit 'close' on wrapper\n            clientWrapper.emit('close', code);\n          }\n        },\n      }\n    });\n\n    // Adding a mock object for Transport.server\n    if (!this.server) {\n      this.server = new DummyServer();\n    }\n  }\n\n  public listen(port: number, hostname?: string, backlog?: number, listeningListener?: () => void) {\n    this._listening = this.expressApp.listen(port, listeningListener);\n\n    this.expressApp.use(`/${matchMaker.controller.matchmakeRoute}`, async (req, res) => {\n      try {\n        await this.handleMatchMakeRequest(req, res);\n      } catch (e) {\n        res.status(500).json({\n          code: e.code,\n          error: e.message\n        });\n      }\n    });\n\n    // Mocking Transport.server behaviour, https://github.com/colyseus/colyseus/issues/458\n    // @ts-ignore\n    this.server.emit(\"listening\");\n\n    return this;\n  }\n\n  public shutdown() {\n    if (this._listening) {\n      this._listening.close();\n\n      // @ts-ignore\n      this.server.emit(\"close\"); // Mocking Transport.server behaviour, https://github.com/colyseus/colyseus/issues/458\n    }\n  }\n\n  public simulateLatency(milliseconds: number) {\n    if (this._originalRawSend == null) {\n      this._originalRawSend = WebSocketClient.prototype.raw;\n    }\n\n    const originalRawSend = this._originalRawSend;\n    WebSocketClient.prototype.raw = milliseconds <= Number.EPSILON ? originalRawSend : function () {\n      setTimeout(() => originalRawSend.apply(this, arguments), milliseconds);\n    };\n  }\n\n  protected async onConnection(rawClient: ServerWebSocket<WebSocketData>) {\n    const wrapper = new WebSocketWrapper(rawClient);\n    // keep reference to client and its wrapper\n    this.clients.push(rawClient);\n    this.clientWrappers.set(rawClient, wrapper);\n\n    const parsedURL = new URL(rawClient.data.url);\n\n    const sessionId = parsedURL.searchParams.get(\"sessionId\");\n    const processAndRoomId = parsedURL.pathname.match(/\\/[a-zA-Z0-9_\\-]+\\/([a-zA-Z0-9_\\-]+)$/);\n    const roomId = processAndRoomId && processAndRoomId[1];\n\n    const room = matchMaker.getRoomById(roomId);\n    const client = new WebSocketClient(sessionId, wrapper);\n\n    //\n    // TODO: DRY code below with all transports\n    //\n\n    try {\n      if (!room || !room.hasReservedSeat(sessionId, parsedURL.searchParams.get(\"reconnectionToken\") as string)) {\n        throw new Error('seat reservation expired.');\n      }\n\n      await room._onJoin(client, rawClient as unknown as http.IncomingMessage);\n\n    } catch (e) {\n      debugAndPrintError(e);\n\n      // send error code to client then terminate\n      client.error(e.code, e.message, () => rawClient.close());\n    }\n  }\n\n  protected async handleMatchMakeRequest(req: Request, res: Response) {\n    const writeHeaders = (req: Request, res: Response) => {\n      if (res.destroyed) return;\n\n      res.set(Object.assign(\n        {},\n        matchMaker.controller.DEFAULT_CORS_HEADERS,\n        matchMaker.controller.getCorsHeaders.call(undefined, req)\n      ));\n\n      return true;\n    };\n\n    try {\n      switch (req.method) {\n        case 'OPTIONS': {\n          writeHeaders(req, res);\n          res.status(200).end();\n          break;\n        }\n\n        case 'GET': {\n          const matchedParams = req.path.match(matchMaker.controller.allowedRoomNameChars);\n          const roomName = (matchedParams && matchedParams.length > 1)\n            ? matchedParams[matchedParams.length - 1]\n            : \"\";\n\n          writeHeaders(req, res);\n          res.json(await matchMaker.controller.getAvailableRooms(roomName || ''));\n          break;\n        }\n\n        case 'POST': {\n          // do not accept matchmaking requests if already shutting down\n          if (matchMaker.isGracefullyShuttingDown) {\n            throw new ServerError(503, \"server is shutting down\");\n          }\n\n          const matchedParams = req.path.match(matchMaker.controller.allowedRoomNameChars);\n          const matchmakeIndex = matchedParams.indexOf(matchMaker.controller.matchmakeRoute);\n          let clientOptions = req.body; // Bun.readableStreamToJSON(req.body);\n\n          if (clientOptions == null) {\n            throw new ServerError(500, \"invalid JSON input\");\n          }\n\n          if (typeof clientOptions === 'string' && clientOptions.length > 2) {\n            clientOptions = JSON.parse(clientOptions);\n          } else if (typeof clientOptions !== 'object') {\n            clientOptions = {};\n          }\n\n          const method = matchedParams[matchmakeIndex + 1];\n          const roomName = matchedParams[matchmakeIndex + 2] || '';\n\n          writeHeaders(req, res);\n          res.json(await matchMaker.controller.invokeMethod(\n            method,\n            roomName,\n            clientOptions,\n            { token: getBearerToken(req.headers['authorization']), request: req },\n          ));\n          break;\n        }\n\n        default: throw new ServerError(500, \"invalid request method\");\n      }\n\n    } catch (e) {\n      writeHeaders(req, res);\n      res.status(500)\n        .json({ code: e.code, error: e.message });\n    }\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["req", "res"]
}
